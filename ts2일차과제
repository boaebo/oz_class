Arrays

1. 문제: number[]와 Array<number> 중 어떤 것이 더 적합한 배열 타입 표현인가요? 그 이유는 무엇인가요?
-> type[]은 array<type>의 축약형 개념이다. type[]은 가독성이 좋아 보다 간결하게 표현할 수 있지만 여러 타입 허용이 불가하다.
  현업에서는 type[]를 많이 사용한다.

2. 문제: 다음 배열의 타입을 정의하세요: const colors = ["red", "green", "blue"];
->  const colors: string[] = ["red", "green", "blue"];

3. 문제: 다음 코드가 오류를 발생시키는 이유는 무엇인가요?
let numbers: number[] = [1, 2, 3];
numbers.push("4");
-> number로 배열 타입이 정의되어있는데, push하려고 하는 "4"는 string이기 때문이다.

4. 문제: 다음 코드에서 잘못된 점을 찾고, mixedArray 의 배열을 수정하세요:
let mixedArray: number[] = [1, 'two', 3];
-> let mixedArray: number[] = [1, 2, 3];


Objects

1. 문제: 다음 객체에 대한 올바른 타입 정의는 무엇인가요?
const person = {
  name: "Byul",
  age: 30
};
-> type person = {
    name: string,
    age: number
};

2. 문제: 객체 타입을 사용하는 주된 이유 두 가지는 무엇인가요?
  -> 1. 객체의 형태와 구조를 보장하고 예측한다.
    2. 예상치 못한 값이 들어가는 것을 방지한다.

3.문제: 다음 타입 정의에 어긋나는 객체 속성을 추가하는 예를 드세요.
type Book = {
  title: string;
  author: string;
  yearPublished: number;
};

-> let myBook: Book = {
  price: 1000;
}

price는 Book type에 정의되어있지 않다.
  
Functions

1. 문제: 다음 함수의 올바른 호출 시그니처는 무엇인가요?
function add(x: number, y: number): number {
  return x + y;
}
-> 호출 시그니처 : 인수 또는 리턴값의 타입을 지정하는 문법
  (x:number, y:number)=>number


2. 문제: 다음 함수가 올바른 타입 시그니처를 따르고 있는지 판단하세요:
function multiply(x: number, y: number): string {
  return x * y;
}
-> return값이 숫자이기 때문에 (x: number, y: number): number이 되어야 한다.

3. 문제: 함수 시그니처 (x: string) => void에 맞는 logMessage 함수를 작성하세요. 이 함수는 받은 문자열 메시지를 콘솔에 출력합니다.

  ->  void 는 해당 함수가 반환값이 없다는 것을 명시할 때 사용

      function logMessage(x:string): void{
        console.log(x)
      }

4. 문제: 함수 시그니처 (x: string) => never에 맞는 errorThrower 함수를 작성하세요. 이 함수는 주어진 문자열로 예외를 발생시킵니다.

  ->  never는 해당 함수가 절대 반환값이 존재하지 않을 것이다를 컴파일러에게 전달
      일반적으로는 자주 사용하지 않는다.
  
    function errorThrower(x: string): never{
        throw new Error(x);
    }


Union

1. 문제: 다음 변수에 대한 올바른 유니언 타입은 무엇인가요?
let value: ??? = "hello";
// 가능한 타입: number, string, boolean

->number | string | boolean

2. 문제: 유니언 타입이 필요한 상황의 예를 들어주세요.

-> 여러 타입을 받아야 할 때 필요하다.

3. 문제: 다음 유니언 타입의 잘못된 사용을 찾아보세요.
function processValue(value: number | string): number {
  return value.length;
}

-> length는 string에 적용이 되는 메소드다.
  function processValue(value: number | string): number {
  
  if(typeof value === "string"){
  return value.length;
  }

  return.value;
}

로 고칠 수 있다.



Interfaces

1. 문제: 인터페이스 Car를 만들고 drive 메서드를 포함하세요. drive 메서드는 반환 타입이 없습니다(void). 또한, Car 인터페이스를 만족하는 객체를 생성하세요.

  interface Car {
  drive(): void;
  }

  const myCar: car = {
    drive() => 
  }

2. 문제: 인터페이스 Product를 만들고, name과 price 속성을 포함하세요. price는 선택적 속성으로 설정하세요

interface Product {
  name : string;
  price? : number;
}

3. 문제: Vehicle 인터페이스를 만들고, readonly 속성인 serialNumber와 일반 속성 type를 포함하세요.

  interface Vehicle {
  readonly seriaNumber : number;
  type: string;
  }


Tuples

1. 문제: 다음과 같은 튜플 타입을 정의하세요: 첫 번째 요소는 문자열, 두 번째 요소는 숫자입니다.
type StringNumberTuple = _________________;

type StringNumberTuple = [string, number];

2. 문제: 튜플의 장점은 무엇인가요?
3. 문제: 다음 튜플 타입에 문제가 있는지 판단하세요:
let myTuple: [string, number] = ["age", 25, "extra"];

mytuple에는  "extra"에 해당하는 것이 정의되어있지 않다.


Enum

1. 문제: 색상을 나타내는 Enum을 정의해보세요.

  enum Color{
    red,
    green,
    yellow,
    black
  }
2. 문제: Enum을 사용하는 주된 이유는 무엇인가요?

  상수의 명명된 집합을 쉽게 다루기 위해 사용
  여러 상수값들을 그룹화 하는 것이 목적이다.
  
3. 문제: 다음 Enum의 사용법에 문제가 있는지 판단하세요:
enum Direction {
  Up,
  Down,
  Left,
  Right
}

let move: Direction = Direction.Upward;

Upward는 정의되어있지 않다. Upward를 사용하고 싶으면 enum Direction에 추가해야한다.





도전

1. 문제: 각 변수에 알맞은 타입을 지정해주세요.
let age:number  = 30;
let isPerson: boolean = true;
let a: number[] = [1,2,3];
let b: number[] = [2,3,4];
let rgb: string[] = ['red','green','blue'];
let fruits: string[] = ['apple', 'banana', 'orange'];


2. 문제: 함수 시그니처 (x: number, y: number) => number에 맞는 multiply 함수를 작성하고, 두 숫자의 곱을 반환하세요.
function multiply(x: ______, y: ______): ______ {
  return _____;
}

  function multiply (x: number, y:number):number{
  return x * y;
  }

3. 문제: 타입 number[]을 가진 배열 numbers에서 모든 홀수를 제거하는 함수를 작성하세요.
function removeOdds(numbers: _______): _______ {
  return ______________________________;
}

function removeOdds(numbers: number[]):number[]{
  return numbers.filter(n
}

4. 문제: Book 인터페이스를 정의하고, title과 author 속성을 포함하는 객체를 만든 다음, 책 제목과 저자를 결합한 문자열을 반환하는 함수를 작성하세요.
interface Book { title: ______; author: ______; }
function formatBook(book: ____): ______ {
  return ______________________________;
}

interface Book { title: string; author: string;}
function formatBook(book: Book): string {
return `${title} #{author}`;
}

6. 문제: 유니언 타입 string | number을 사용하여, 문자열 또는 숫자를 받아 그 길이 또는 값을 반환하는 함수를 작성하세요.
function getSize(value: _______________): ______ {
  return ________________________________________________;
}


function getSize(value : string | number): number  {
  if(typeof value === "string"){
    return value.length;
  }
    return value;
}

7. 문제: 인터페이스 Point를 확장하는 ColoredPoint 인터페이스를 생성하고, color 속성을 추가하세요.
interface Point { x: number; y: number; }
____________________________________ { _______________ }

interface Point { x: number; y: number; }
interface twoPoint extends Point { color : string;}


8. 문제: Vehicle 인터페이스를 확장하는 Car 인터페이스를 만들고 numberOfDoors 속성을 추가하세요. Car 객체를 받아 문의 개수를 반환하는 함수를 작성하세요.
interface Vehicle { wheels: number; }
______________________________________________________
function getNumberOfDoors(car: ___): ______ {
  return __________________;
}


interface Veicle {wheels:number;}
interface Car extends Veicle { numberOfDoors: number;}
function getNumberOfDoors(car:Car):number{
  return car.numberOfDoors;
}


9. 문제: 인터페이스 Rectangle을 정의하고, 두 속성 width와 height를 포함한 객체를 생성하세요. 또한, 면적을 반환하는 함수를 작성하세요.
interface Rectangle {
  width: ______;
  height: ______;
}

const rect: _________ = { __________, __________ };

function getArea(rectangle: _________): ______ {
  return ____________________________________;
}


interface Rectangle{
  width: number;
  height: number;
}

const rect: Rectangle = {width:20, height:20};

function getArea(rectangle: Rectangle ): number{
   return Rectangle.width * Rectangle.height;
}

10. 문제: 이름과 나이를 나타내는 NameAge 튜플 타입을 만들고, 이름과 나이를 받아 NameAge 튜플을 반환하는 createPerson 함수를 작성하세요.
type NameAge = ______________;
function createPerson(name: ______, age: ______): NameAge {
  return ____________;
}


type NameAge = [string, number];
function createPreson(name: string, age: number): NameAge{
  return [name, age];
}




